import asyncio
import json
import os
import time
from pathlib import Path

from enhanced_server import EnhancedMCPServer

LOG_DIR = Path(__file__).parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

# Services and basic CRUD-style test plans
TEST_PLAN = {
    "todoist": {
        "item_type": "task",
        "create_payload": {"content": "Live test task from MCP"},
        "update_payload": {"content": "Live test task – updated"},
    },
    "gcal": {
        "item_type": "event",
        "create_payload": {
            "summary": "MCP Live Test Event",
            "start": {"dateTime": "2030-01-01T09:00:00Z"},
            "end": {"dateTime": "2030-01-01T10:00:00Z"},
        },
        "update_payload": {"summary": "MCP Live Test Event – updated"},
    },
    "gmail": {
        "item_type": "message",
        "create_payload": {
            "to": "dummy@example.com",
            "subject": "MCP Live Test Email",
            "body": "This is a test email generated by the live integration harness.",
        },
        "update_payload": {},  # Gmail API typically doesn’t support message updates easily
    },
    "deep_pcb": {
        "item_type": "pcb_design",
        "create_payload": {"design_name": "Live MCP Test PCB"},
        "update_payload": {"design_name": "Live MCP Test PCB – rev2"},
    },
}


async def exercise_service(server: EnhancedMCPServer, service: str, plan: dict):
    summary = {"service": service, "steps": []}

    async def call(action: str, payload: dict):
        packet_args = {
            "tool_type": service,
            "action": action,
            "item_type": plan["item_type"],
            "payload": payload,
        }
        start = time.time()
        result = await server._execute_packet(packet_args)
        duration = round((time.time() - start) * 1000, 2)
        return result, duration, packet_args

    # 1) Create
    create_res, dur, pkt = await call("create", plan["create_payload"])
    summary["steps"].append({"action": "create", "duration_ms": dur, "success": create_res.get("success", False)})

    # Extract item id if returned for later ops
    item_id = None
    if create_res.get("success") and isinstance(create_res.get("result"), dict):
        item_id = create_res["result"].get("id") or create_res["result"].get("design", {}).get("id")

    # 2) Read
    if item_id:
        read_payload = {"id": item_id}
        read_res, dur, _ = await call("read", read_payload)
        summary["steps"].append({"action": "read", "duration_ms": dur, "success": read_res.get("success", False)})
    else:
        summary["steps"].append({"action": "read", "duration_ms": 0, "success": False, "skipped": True})
        read_res = None

    # 3) Update
    if item_id and plan["update_payload"]:
        upd_payload = {"id": item_id, **plan["update_payload"]}
        upd_res, dur, _ = await call("update", upd_payload)
        summary["steps"].append({"action": "update", "duration_ms": dur, "success": upd_res.get("success", False)})
    else:
        summary["steps"].append({"action": "update", "duration_ms": 0, "success": False, "skipped": True})
        upd_res = None

    # 4) Delete
    if item_id:
        del_res, dur, _ = await call("delete", {"id": item_id})
        summary["steps"].append({"action": "delete", "duration_ms": dur, "success": del_res.get("success", False)})
    else:
        summary["steps"].append({"action": "delete", "duration_ms": 0, "success": False, "skipped": True})
        del_res = None

    # Persist detailed traces
    trace_file = LOG_DIR / f"{service}_{int(time.time())}.json"
    with trace_file.open("w") as f:
        json.dump({
            "create": create_res,
            "read": read_res,
            "update": upd_res,
            "delete": del_res,
        }, f, indent=2)

    summary["trace"] = str(trace_file)
    return summary


async def main():
    # Ensure env vars exist; warn if missing
    missing = []
    for key in ["TODOIST_API_TOKEN", "DEEPPCB_API_KEY", "GOOGLE_CREDENTIALS_FILE"]:
        if not os.getenv(key):
            missing.append(key)
    if missing:
        print("⚠️  Missing potential env vars:", ", ".join(missing))
        print("   Some service calls may fail or run in mock mode.\n")

    server = EnhancedMCPServer()

    summaries = []
    for svc, plan in TEST_PLAN.items():
        print(f"\n▶︎ Exercising {svc} service...")
        summaries.append(await exercise_service(server, svc, plan))

    # Human-readable report
    print("\n===== LIVE SERVICE TEST SUMMARY =====")
    for s in summaries:
        print(f"Service: {s['service']}")
        for step in s["steps"]:
            status = "✓" if step["success"] else ("-" if step.get("skipped") else "✗")
            print(f"  {status} {step['action']} ({step['duration_ms']} ms)")
        print(f"  Trace → {s['trace']}\n")


if __name__ == "__main__":
    asyncio.run(main())

